// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: acc_conf.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "acc_conf.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace blaze {

namespace {

const ::google::protobuf::Descriptor* AccPlatform_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccPlatform_reflection_ = NULL;
const ::google::protobuf::Descriptor* AccPlatform_KeyValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccPlatform_KeyValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* AccWorker_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccWorker_reflection_ = NULL;
const ::google::protobuf::Descriptor* AccWorker_KeyValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccWorker_KeyValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* ManagerConf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ManagerConf_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* AccType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_acc_5fconf_2eproto() {
  protobuf_AddDesc_acc_5fconf_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "acc_conf.proto");
  GOOGLE_CHECK(file != NULL);
  AccPlatform_descriptor_ = file->message_type(0);
  static const int AccPlatform_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccPlatform, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccPlatform, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccPlatform, cache_loc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccPlatform, cache_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccPlatform, scratch_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccPlatform, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccPlatform, acc_),
  };
  AccPlatform_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccPlatform_descriptor_,
      AccPlatform::default_instance_,
      AccPlatform_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccPlatform, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccPlatform, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccPlatform));
  AccPlatform_KeyValue_descriptor_ = AccPlatform_descriptor_->nested_type(0);
  static const int AccPlatform_KeyValue_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccPlatform_KeyValue, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccPlatform_KeyValue, value_),
  };
  AccPlatform_KeyValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccPlatform_KeyValue_descriptor_,
      AccPlatform_KeyValue::default_instance_,
      AccPlatform_KeyValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccPlatform_KeyValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccPlatform_KeyValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccPlatform_KeyValue));
  AccWorker_descriptor_ = file->message_type(1);
  static const int AccWorker_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccWorker, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccWorker, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccWorker, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccWorker, kernel_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccWorker, kernel_path_),
  };
  AccWorker_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccWorker_descriptor_,
      AccWorker::default_instance_,
      AccWorker_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccWorker, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccWorker, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccWorker));
  AccWorker_KeyValue_descriptor_ = AccWorker_descriptor_->nested_type(0);
  static const int AccWorker_KeyValue_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccWorker_KeyValue, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccWorker_KeyValue, value_),
  };
  AccWorker_KeyValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccWorker_KeyValue_descriptor_,
      AccWorker_KeyValue::default_instance_,
      AccWorker_KeyValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccWorker_KeyValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccWorker_KeyValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccWorker_KeyValue));
  ManagerConf_descriptor_ = file->message_type(2);
  static const int ManagerConf_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManagerConf, app_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManagerConf, gam_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManagerConf, verbose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManagerConf, local_dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManagerConf, platform_),
  };
  ManagerConf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ManagerConf_descriptor_,
      ManagerConf::default_instance_,
      ManagerConf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManagerConf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManagerConf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ManagerConf));
  AccType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_acc_5fconf_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccPlatform_descriptor_, &AccPlatform::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccPlatform_KeyValue_descriptor_, &AccPlatform_KeyValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccWorker_descriptor_, &AccWorker::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccWorker_KeyValue_descriptor_, &AccWorker_KeyValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ManagerConf_descriptor_, &ManagerConf::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_acc_5fconf_2eproto() {
  delete AccPlatform::default_instance_;
  delete AccPlatform_reflection_;
  delete AccPlatform::_default_id_;
  delete AccPlatform::_default_cache_loc_;
  delete AccPlatform_KeyValue::default_instance_;
  delete AccPlatform_KeyValue_reflection_;
  delete AccWorker::default_instance_;
  delete AccWorker_reflection_;
  delete AccWorker_KeyValue::default_instance_;
  delete AccWorker_KeyValue_reflection_;
  delete ManagerConf::default_instance_;
  delete ManagerConf_reflection_;
  delete ManagerConf::_default_local_dir_;
}

void protobuf_AddDesc_acc_5fconf_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016acc_conf.proto\022\005blaze\"\354\001\n\013AccPlatform\022"
    "\017\n\002id\030\001 \001(\t:\003cpu\022\016\n\004path\030\002 \001(\t:\000\022\026\n\tcach"
    "e_loc\030\003 \001(\t:\003cpu\022\027\n\013cache_limit\030\004 \001(\005:\0021"
    "6\022\030\n\rscratch_limit\030\005 \001(\005:\0014\022*\n\005param\030\006 \003"
    "(\0132\033.blaze.AccPlatform.KeyValue\022\035\n\003acc\030\007"
    " \003(\0132\020.blaze.AccWorker\032&\n\010KeyValue\022\013\n\003ke"
    "y\030\001 \002(\t\022\r\n\005value\030\002 \002(\t\"\241\001\n\tAccWorker\022\n\n\002"
    "id\030\001 \002(\t\022\014\n\004path\030\002 \002(\t\022(\n\005param\030\003 \003(\0132\031."
    "blaze.AccWorker.KeyValue\022\023\n\013kernel_name\030"
    "\004 \001(\t\022\023\n\013kernel_path\030\005 \001(\t\032&\n\010KeyValue\022\013"
    "\n\003key\030\001 \002(\t\022\r\n\005value\030\002 \002(\t\"\220\001\n\013ManagerCo"
    "nf\022\026\n\010app_port\030\001 \001(\005:\0041027\022\026\n\010gam_port\030\002"
    " \001(\005:\0041028\022\022\n\007verbose\030\003 \001(\005:\0010\022\027\n\tlocal_"
    "dir\030\004 \001(\t:\004/tmp\022$\n\010platform\030\005 \003(\0132\022.blaz"
    "e.AccPlatform*2\n\007AccType\022\007\n\003CPU\020\000\022\n\n\006Ope"
    "nCL\020\001\022\010\n\004CUDA\020\002\022\010\n\004ZYNQ\020\003", 625);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "acc_conf.proto", &protobuf_RegisterTypes);
  AccPlatform::_default_id_ =
      new ::std::string("cpu", 3);
  AccPlatform::_default_cache_loc_ =
      new ::std::string("cpu", 3);
  AccPlatform::default_instance_ = new AccPlatform();
  AccPlatform_KeyValue::default_instance_ = new AccPlatform_KeyValue();
  AccWorker::default_instance_ = new AccWorker();
  AccWorker_KeyValue::default_instance_ = new AccWorker_KeyValue();
  ManagerConf::_default_local_dir_ =
      new ::std::string("/tmp", 4);
  ManagerConf::default_instance_ = new ManagerConf();
  AccPlatform::default_instance_->InitAsDefaultInstance();
  AccPlatform_KeyValue::default_instance_->InitAsDefaultInstance();
  AccWorker::default_instance_->InitAsDefaultInstance();
  AccWorker_KeyValue::default_instance_->InitAsDefaultInstance();
  ManagerConf::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_acc_5fconf_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_acc_5fconf_2eproto {
  StaticDescriptorInitializer_acc_5fconf_2eproto() {
    protobuf_AddDesc_acc_5fconf_2eproto();
  }
} static_descriptor_initializer_acc_5fconf_2eproto_;
const ::google::protobuf::EnumDescriptor* AccType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccType_descriptor_;
}
bool AccType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int AccPlatform_KeyValue::kKeyFieldNumber;
const int AccPlatform_KeyValue::kValueFieldNumber;
#endif  // !_MSC_VER

AccPlatform_KeyValue::AccPlatform_KeyValue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AccPlatform_KeyValue::InitAsDefaultInstance() {
}

AccPlatform_KeyValue::AccPlatform_KeyValue(const AccPlatform_KeyValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AccPlatform_KeyValue::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccPlatform_KeyValue::~AccPlatform_KeyValue() {
  SharedDtor();
}

void AccPlatform_KeyValue::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void AccPlatform_KeyValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccPlatform_KeyValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccPlatform_KeyValue_descriptor_;
}

const AccPlatform_KeyValue& AccPlatform_KeyValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_acc_5fconf_2eproto();
  return *default_instance_;
}

AccPlatform_KeyValue* AccPlatform_KeyValue::default_instance_ = NULL;

AccPlatform_KeyValue* AccPlatform_KeyValue::New() const {
  return new AccPlatform_KeyValue;
}

void AccPlatform_KeyValue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AccPlatform_KeyValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required string value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AccPlatform_KeyValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->key(), output);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AccPlatform_KeyValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AccPlatform_KeyValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // required string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccPlatform_KeyValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccPlatform_KeyValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccPlatform_KeyValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AccPlatform_KeyValue::MergeFrom(const AccPlatform_KeyValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AccPlatform_KeyValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccPlatform_KeyValue::CopyFrom(const AccPlatform_KeyValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccPlatform_KeyValue::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AccPlatform_KeyValue::Swap(AccPlatform_KeyValue* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AccPlatform_KeyValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccPlatform_KeyValue_descriptor_;
  metadata.reflection = AccPlatform_KeyValue_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

::std::string* AccPlatform::_default_id_ = NULL;
::std::string* AccPlatform::_default_cache_loc_ = NULL;
#ifndef _MSC_VER
const int AccPlatform::kIdFieldNumber;
const int AccPlatform::kPathFieldNumber;
const int AccPlatform::kCacheLocFieldNumber;
const int AccPlatform::kCacheLimitFieldNumber;
const int AccPlatform::kScratchLimitFieldNumber;
const int AccPlatform::kParamFieldNumber;
const int AccPlatform::kAccFieldNumber;
#endif  // !_MSC_VER

AccPlatform::AccPlatform()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AccPlatform::InitAsDefaultInstance() {
}

AccPlatform::AccPlatform(const AccPlatform& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AccPlatform::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(_default_id_);
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cache_loc_ = const_cast< ::std::string*>(_default_cache_loc_);
  cache_limit_ = 16;
  scratch_limit_ = 4;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccPlatform::~AccPlatform() {
  SharedDtor();
}

void AccPlatform::SharedDtor() {
  if (id_ != _default_id_) {
    delete id_;
  }
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (cache_loc_ != _default_cache_loc_) {
    delete cache_loc_;
  }
  if (this != default_instance_) {
  }
}

void AccPlatform::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccPlatform::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccPlatform_descriptor_;
}

const AccPlatform& AccPlatform::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_acc_5fconf_2eproto();
  return *default_instance_;
}

AccPlatform* AccPlatform::default_instance_ = NULL;

AccPlatform* AccPlatform::New() const {
  return new AccPlatform;
}

void AccPlatform::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != _default_id_) {
        id_->assign(*_default_id_);
      }
    }
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
    if (has_cache_loc()) {
      if (cache_loc_ != _default_cache_loc_) {
        cache_loc_->assign(*_default_cache_loc_);
      }
    }
    cache_limit_ = 16;
    scratch_limit_ = 4;
  }
  param_.Clear();
  acc_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AccPlatform::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1 [default = "cpu"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_path;
        break;
      }

      // optional string path = 2 [default = ""];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cache_loc;
        break;
      }

      // optional string cache_loc = 3 [default = "cpu"];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cache_loc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cache_loc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cache_loc().data(), this->cache_loc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cache_limit;
        break;
      }

      // optional int32 cache_limit = 4 [default = 16];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cache_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cache_limit_)));
          set_has_cache_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_scratch_limit;
        break;
      }

      // optional int32 scratch_limit = 5 [default = 4];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scratch_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scratch_limit_)));
          set_has_scratch_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_param;
        break;
      }

      // repeated .blaze.AccPlatform.KeyValue param = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_param;
        if (input->ExpectTag(58)) goto parse_acc;
        break;
      }

      // repeated .blaze.AccWorker acc = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_acc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_acc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_acc;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AccPlatform::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string id = 1 [default = "cpu"];
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // optional string path = 2 [default = ""];
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->path(), output);
  }

  // optional string cache_loc = 3 [default = "cpu"];
  if (has_cache_loc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cache_loc().data(), this->cache_loc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->cache_loc(), output);
  }

  // optional int32 cache_limit = 4 [default = 16];
  if (has_cache_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cache_limit(), output);
  }

  // optional int32 scratch_limit = 5 [default = 4];
  if (has_scratch_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->scratch_limit(), output);
  }

  // repeated .blaze.AccPlatform.KeyValue param = 6;
  for (int i = 0; i < this->param_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->param(i), output);
  }

  // repeated .blaze.AccWorker acc = 7;
  for (int i = 0; i < this->acc_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->acc(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AccPlatform::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string id = 1 [default = "cpu"];
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional string path = 2 [default = ""];
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->path(), target);
  }

  // optional string cache_loc = 3 [default = "cpu"];
  if (has_cache_loc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cache_loc().data(), this->cache_loc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->cache_loc(), target);
  }

  // optional int32 cache_limit = 4 [default = 16];
  if (has_cache_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cache_limit(), target);
  }

  // optional int32 scratch_limit = 5 [default = 4];
  if (has_scratch_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->scratch_limit(), target);
  }

  // repeated .blaze.AccPlatform.KeyValue param = 6;
  for (int i = 0; i < this->param_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->param(i), target);
  }

  // repeated .blaze.AccWorker acc = 7;
  for (int i = 0; i < this->acc_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->acc(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AccPlatform::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string id = 1 [default = "cpu"];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string path = 2 [default = ""];
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

    // optional string cache_loc = 3 [default = "cpu"];
    if (has_cache_loc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cache_loc());
    }

    // optional int32 cache_limit = 4 [default = 16];
    if (has_cache_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cache_limit());
    }

    // optional int32 scratch_limit = 5 [default = 4];
    if (has_scratch_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scratch_limit());
    }

  }
  // repeated .blaze.AccPlatform.KeyValue param = 6;
  total_size += 1 * this->param_size();
  for (int i = 0; i < this->param_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->param(i));
  }

  // repeated .blaze.AccWorker acc = 7;
  total_size += 1 * this->acc_size();
  for (int i = 0; i < this->acc_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->acc(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccPlatform::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccPlatform* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccPlatform*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AccPlatform::MergeFrom(const AccPlatform& from) {
  GOOGLE_CHECK_NE(&from, this);
  param_.MergeFrom(from.param_);
  acc_.MergeFrom(from.acc_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_path()) {
      set_path(from.path());
    }
    if (from.has_cache_loc()) {
      set_cache_loc(from.cache_loc());
    }
    if (from.has_cache_limit()) {
      set_cache_limit(from.cache_limit());
    }
    if (from.has_scratch_limit()) {
      set_scratch_limit(from.scratch_limit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AccPlatform::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccPlatform::CopyFrom(const AccPlatform& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccPlatform::IsInitialized() const {

  for (int i = 0; i < param_size(); i++) {
    if (!this->param(i).IsInitialized()) return false;
  }
  for (int i = 0; i < acc_size(); i++) {
    if (!this->acc(i).IsInitialized()) return false;
  }
  return true;
}

void AccPlatform::Swap(AccPlatform* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(path_, other->path_);
    std::swap(cache_loc_, other->cache_loc_);
    std::swap(cache_limit_, other->cache_limit_);
    std::swap(scratch_limit_, other->scratch_limit_);
    param_.Swap(&other->param_);
    acc_.Swap(&other->acc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AccPlatform::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccPlatform_descriptor_;
  metadata.reflection = AccPlatform_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AccWorker_KeyValue::kKeyFieldNumber;
const int AccWorker_KeyValue::kValueFieldNumber;
#endif  // !_MSC_VER

AccWorker_KeyValue::AccWorker_KeyValue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AccWorker_KeyValue::InitAsDefaultInstance() {
}

AccWorker_KeyValue::AccWorker_KeyValue(const AccWorker_KeyValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AccWorker_KeyValue::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccWorker_KeyValue::~AccWorker_KeyValue() {
  SharedDtor();
}

void AccWorker_KeyValue::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void AccWorker_KeyValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccWorker_KeyValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccWorker_KeyValue_descriptor_;
}

const AccWorker_KeyValue& AccWorker_KeyValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_acc_5fconf_2eproto();
  return *default_instance_;
}

AccWorker_KeyValue* AccWorker_KeyValue::default_instance_ = NULL;

AccWorker_KeyValue* AccWorker_KeyValue::New() const {
  return new AccWorker_KeyValue;
}

void AccWorker_KeyValue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AccWorker_KeyValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required string value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AccWorker_KeyValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->key(), output);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AccWorker_KeyValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AccWorker_KeyValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // required string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccWorker_KeyValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccWorker_KeyValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccWorker_KeyValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AccWorker_KeyValue::MergeFrom(const AccWorker_KeyValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AccWorker_KeyValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccWorker_KeyValue::CopyFrom(const AccWorker_KeyValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccWorker_KeyValue::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AccWorker_KeyValue::Swap(AccWorker_KeyValue* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AccWorker_KeyValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccWorker_KeyValue_descriptor_;
  metadata.reflection = AccWorker_KeyValue_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int AccWorker::kIdFieldNumber;
const int AccWorker::kPathFieldNumber;
const int AccWorker::kParamFieldNumber;
const int AccWorker::kKernelNameFieldNumber;
const int AccWorker::kKernelPathFieldNumber;
#endif  // !_MSC_VER

AccWorker::AccWorker()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AccWorker::InitAsDefaultInstance() {
}

AccWorker::AccWorker(const AccWorker& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AccWorker::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  kernel_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  kernel_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccWorker::~AccWorker() {
  SharedDtor();
}

void AccWorker::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (kernel_name_ != &::google::protobuf::internal::kEmptyString) {
    delete kernel_name_;
  }
  if (kernel_path_ != &::google::protobuf::internal::kEmptyString) {
    delete kernel_path_;
  }
  if (this != default_instance_) {
  }
}

void AccWorker::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccWorker::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccWorker_descriptor_;
}

const AccWorker& AccWorker::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_acc_5fconf_2eproto();
  return *default_instance_;
}

AccWorker* AccWorker::default_instance_ = NULL;

AccWorker* AccWorker::New() const {
  return new AccWorker;
}

void AccWorker::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
    if (has_kernel_name()) {
      if (kernel_name_ != &::google::protobuf::internal::kEmptyString) {
        kernel_name_->clear();
      }
    }
    if (has_kernel_path()) {
      if (kernel_path_ != &::google::protobuf::internal::kEmptyString) {
        kernel_path_->clear();
      }
    }
  }
  param_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AccWorker::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_path;
        break;
      }

      // required string path = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_param;
        break;
      }

      // repeated .blaze.AccWorker.KeyValue param = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_param;
        if (input->ExpectTag(34)) goto parse_kernel_name;
        break;
      }

      // optional string kernel_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_kernel_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_kernel_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->kernel_name().data(), this->kernel_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_kernel_path;
        break;
      }

      // optional string kernel_path = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_kernel_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_kernel_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->kernel_path().data(), this->kernel_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AccWorker::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // required string path = 2;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->path(), output);
  }

  // repeated .blaze.AccWorker.KeyValue param = 3;
  for (int i = 0; i < this->param_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->param(i), output);
  }

  // optional string kernel_name = 4;
  if (has_kernel_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->kernel_name().data(), this->kernel_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->kernel_name(), output);
  }

  // optional string kernel_path = 5;
  if (has_kernel_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->kernel_path().data(), this->kernel_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->kernel_path(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AccWorker::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required string path = 2;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->path(), target);
  }

  // repeated .blaze.AccWorker.KeyValue param = 3;
  for (int i = 0; i < this->param_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->param(i), target);
  }

  // optional string kernel_name = 4;
  if (has_kernel_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->kernel_name().data(), this->kernel_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->kernel_name(), target);
  }

  // optional string kernel_path = 5;
  if (has_kernel_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->kernel_path().data(), this->kernel_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->kernel_path(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AccWorker::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required string path = 2;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

    // optional string kernel_name = 4;
    if (has_kernel_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->kernel_name());
    }

    // optional string kernel_path = 5;
    if (has_kernel_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->kernel_path());
    }

  }
  // repeated .blaze.AccWorker.KeyValue param = 3;
  total_size += 1 * this->param_size();
  for (int i = 0; i < this->param_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->param(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccWorker::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccWorker* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccWorker*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AccWorker::MergeFrom(const AccWorker& from) {
  GOOGLE_CHECK_NE(&from, this);
  param_.MergeFrom(from.param_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_path()) {
      set_path(from.path());
    }
    if (from.has_kernel_name()) {
      set_kernel_name(from.kernel_name());
    }
    if (from.has_kernel_path()) {
      set_kernel_path(from.kernel_path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AccWorker::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccWorker::CopyFrom(const AccWorker& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccWorker::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < param_size(); i++) {
    if (!this->param(i).IsInitialized()) return false;
  }
  return true;
}

void AccWorker::Swap(AccWorker* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(path_, other->path_);
    param_.Swap(&other->param_);
    std::swap(kernel_name_, other->kernel_name_);
    std::swap(kernel_path_, other->kernel_path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AccWorker::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccWorker_descriptor_;
  metadata.reflection = AccWorker_reflection_;
  return metadata;
}


// ===================================================================

::std::string* ManagerConf::_default_local_dir_ = NULL;
#ifndef _MSC_VER
const int ManagerConf::kAppPortFieldNumber;
const int ManagerConf::kGamPortFieldNumber;
const int ManagerConf::kVerboseFieldNumber;
const int ManagerConf::kLocalDirFieldNumber;
const int ManagerConf::kPlatformFieldNumber;
#endif  // !_MSC_VER

ManagerConf::ManagerConf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ManagerConf::InitAsDefaultInstance() {
}

ManagerConf::ManagerConf(const ManagerConf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ManagerConf::SharedCtor() {
  _cached_size_ = 0;
  app_port_ = 1027;
  gam_port_ = 1028;
  verbose_ = 0;
  local_dir_ = const_cast< ::std::string*>(_default_local_dir_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ManagerConf::~ManagerConf() {
  SharedDtor();
}

void ManagerConf::SharedDtor() {
  if (local_dir_ != _default_local_dir_) {
    delete local_dir_;
  }
  if (this != default_instance_) {
  }
}

void ManagerConf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ManagerConf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ManagerConf_descriptor_;
}

const ManagerConf& ManagerConf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_acc_5fconf_2eproto();
  return *default_instance_;
}

ManagerConf* ManagerConf::default_instance_ = NULL;

ManagerConf* ManagerConf::New() const {
  return new ManagerConf;
}

void ManagerConf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    app_port_ = 1027;
    gam_port_ = 1028;
    verbose_ = 0;
    if (has_local_dir()) {
      if (local_dir_ != _default_local_dir_) {
        local_dir_->assign(*_default_local_dir_);
      }
    }
  }
  platform_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ManagerConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 app_port = 1 [default = 1027];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &app_port_)));
          set_has_app_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gam_port;
        break;
      }

      // optional int32 gam_port = 2 [default = 1028];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gam_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gam_port_)));
          set_has_gam_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_verbose;
        break;
      }

      // optional int32 verbose = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_verbose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &verbose_)));
          set_has_verbose();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_local_dir;
        break;
      }

      // optional string local_dir = 4 [default = "/tmp"];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_local_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_local_dir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->local_dir().data(), this->local_dir().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_platform;
        break;
      }

      // repeated .blaze.AccPlatform platform = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_platform:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_platform()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_platform;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ManagerConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 app_port = 1 [default = 1027];
  if (has_app_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->app_port(), output);
  }

  // optional int32 gam_port = 2 [default = 1028];
  if (has_gam_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gam_port(), output);
  }

  // optional int32 verbose = 3 [default = 0];
  if (has_verbose()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->verbose(), output);
  }

  // optional string local_dir = 4 [default = "/tmp"];
  if (has_local_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->local_dir().data(), this->local_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->local_dir(), output);
  }

  // repeated .blaze.AccPlatform platform = 5;
  for (int i = 0; i < this->platform_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->platform(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ManagerConf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 app_port = 1 [default = 1027];
  if (has_app_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->app_port(), target);
  }

  // optional int32 gam_port = 2 [default = 1028];
  if (has_gam_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gam_port(), target);
  }

  // optional int32 verbose = 3 [default = 0];
  if (has_verbose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->verbose(), target);
  }

  // optional string local_dir = 4 [default = "/tmp"];
  if (has_local_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->local_dir().data(), this->local_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->local_dir(), target);
  }

  // repeated .blaze.AccPlatform platform = 5;
  for (int i = 0; i < this->platform_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->platform(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ManagerConf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 app_port = 1 [default = 1027];
    if (has_app_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->app_port());
    }

    // optional int32 gam_port = 2 [default = 1028];
    if (has_gam_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gam_port());
    }

    // optional int32 verbose = 3 [default = 0];
    if (has_verbose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->verbose());
    }

    // optional string local_dir = 4 [default = "/tmp"];
    if (has_local_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->local_dir());
    }

  }
  // repeated .blaze.AccPlatform platform = 5;
  total_size += 1 * this->platform_size();
  for (int i = 0; i < this->platform_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->platform(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ManagerConf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ManagerConf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ManagerConf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ManagerConf::MergeFrom(const ManagerConf& from) {
  GOOGLE_CHECK_NE(&from, this);
  platform_.MergeFrom(from.platform_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_app_port()) {
      set_app_port(from.app_port());
    }
    if (from.has_gam_port()) {
      set_gam_port(from.gam_port());
    }
    if (from.has_verbose()) {
      set_verbose(from.verbose());
    }
    if (from.has_local_dir()) {
      set_local_dir(from.local_dir());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ManagerConf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ManagerConf::CopyFrom(const ManagerConf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ManagerConf::IsInitialized() const {

  for (int i = 0; i < platform_size(); i++) {
    if (!this->platform(i).IsInitialized()) return false;
  }
  return true;
}

void ManagerConf::Swap(ManagerConf* other) {
  if (other != this) {
    std::swap(app_port_, other->app_port_);
    std::swap(gam_port_, other->gam_port_);
    std::swap(verbose_, other->verbose_);
    std::swap(local_dir_, other->local_dir_);
    platform_.Swap(&other->platform_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ManagerConf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ManagerConf_descriptor_;
  metadata.reflection = ManagerConf_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace blaze

// @@protoc_insertion_point(global_scope)
