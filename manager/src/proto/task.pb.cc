// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: task.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "task.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace blaze {

namespace {

const ::google::protobuf::Descriptor* DataMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* TaskMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TaskMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* AccMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* AccMsg_KeyValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccMsg_KeyValue_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_task_2eproto() {
  protobuf_AddDesc_task_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "task.proto");
  GOOGLE_CHECK(file != NULL);
  DataMsg_descriptor_ = file->message_type(0);
  static const int DataMsg_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataMsg, partition_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataMsg, cached_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataMsg, sampled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataMsg, element_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataMsg, element_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataMsg, num_elements_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataMsg, scalar_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataMsg, file_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataMsg, file_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataMsg, file_offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataMsg, mask_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataMsg, bankID_),
  };
  DataMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DataMsg_descriptor_,
      DataMsg::default_instance_,
      DataMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DataMsg));
  TaskMsg_descriptor_ = file->message_type(1);
  static const int TaskMsg_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskMsg, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskMsg, app_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskMsg, acc_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskMsg, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskMsg, acc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskMsg, msg_),
  };
  TaskMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TaskMsg_descriptor_,
      TaskMsg::default_instance_,
      TaskMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TaskMsg));
  AccMsg_descriptor_ = file->message_type(2);
  static const int AccMsg_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccMsg, acc_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccMsg, platform_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccMsg, task_impl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccMsg, param_),
  };
  AccMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccMsg_descriptor_,
      AccMsg::default_instance_,
      AccMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccMsg));
  AccMsg_KeyValue_descriptor_ = AccMsg_descriptor_->nested_type(0);
  static const int AccMsg_KeyValue_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccMsg_KeyValue, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccMsg_KeyValue, value_),
  };
  AccMsg_KeyValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccMsg_KeyValue_descriptor_,
      AccMsg_KeyValue::default_instance_,
      AccMsg_KeyValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccMsg_KeyValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccMsg_KeyValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccMsg_KeyValue));
  MsgType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_task_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DataMsg_descriptor_, &DataMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TaskMsg_descriptor_, &TaskMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccMsg_descriptor_, &AccMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccMsg_KeyValue_descriptor_, &AccMsg_KeyValue::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_task_2eproto() {
  delete DataMsg::default_instance_;
  delete DataMsg_reflection_;
  delete TaskMsg::default_instance_;
  delete TaskMsg_reflection_;
  delete AccMsg::default_instance_;
  delete AccMsg_reflection_;
  delete AccMsg_KeyValue::default_instance_;
  delete AccMsg_KeyValue_reflection_;
}

void protobuf_AddDesc_task_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ntask.proto\022\005blaze\"\350\001\n\007DataMsg\022\024\n\014parti"
    "tion_id\030\001 \001(\003\022\016\n\006cached\030\002 \001(\010\022\017\n\007sampled"
    "\030\003 \001(\010\022\026\n\016element_length\030\004 \001(\005\022\024\n\014elemen"
    "t_size\030\005 \001(\005\022\024\n\014num_elements\030\006 \001(\005\022\024\n\014sc"
    "alar_value\030\007 \001(\003\022\021\n\tfile_path\030\010 \001(\t\022\021\n\tf"
    "ile_size\030\t \001(\003\022\023\n\013file_offset\030\n \001(\003\022\021\n\tm"
    "ask_path\030\013 \001(\t\"\216\001\n\007TaskMsg\022\034\n\004type\030\001 \002(\016"
    "2\016.blaze.MsgType\022\016\n\006app_id\030\002 \001(\t\022\016\n\006acc_"
    "id\030\003 \001(\t\022\034\n\004data\030\004 \003(\0132\016.blaze.DataMsg\022\032"
    "\n\003acc\030\005 \001(\0132\r.blaze.AccMsg\022\013\n\003msg\030\006 \001(\t\""
    "\217\001\n\006AccMsg\022\016\n\006acc_id\030\001 \002(\t\022\023\n\013platform_i"
    "d\030\002 \002(\t\022\021\n\ttask_impl\030\003 \001(\014\022%\n\005param\030\004 \003("
    "\0132\026.blaze.AccMsg.KeyValue\032&\n\010KeyValue\022\013\n"
    "\003key\030\001 \002(\t\022\r\n\005value\030\002 \002(\014*\241\001\n\007MsgType\022\016\n"
    "\nACCREQUEST\020\000\022\014\n\010ACCGRANT\020\001\022\r\n\tACCREJECT"
    "\020\002\022\r\n\tACCFINISH\020\003\022\013\n\007ACCDATA\020\004\022\016\n\nACCFAI"
    "LURE\020\005\022\020\n\014ACCBROADCAST\020\006\022\013\n\007ACCTERM\020\007\022\017\n"
    "\013ACCREGISTER\020\010\022\r\n\tACCDELETE\020\tB$\n\026org.apa"
    "che.spark.blazeB\nAccMessage", 747);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "task.proto", &protobuf_RegisterTypes);
  DataMsg::default_instance_ = new DataMsg();
  TaskMsg::default_instance_ = new TaskMsg();
  AccMsg::default_instance_ = new AccMsg();
  AccMsg_KeyValue::default_instance_ = new AccMsg_KeyValue();
  DataMsg::default_instance_->InitAsDefaultInstance();
  TaskMsg::default_instance_->InitAsDefaultInstance();
  AccMsg::default_instance_->InitAsDefaultInstance();
  AccMsg_KeyValue::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_task_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_task_2eproto {
  StaticDescriptorInitializer_task_2eproto() {
    protobuf_AddDesc_task_2eproto();
  }
} static_descriptor_initializer_task_2eproto_;
const ::google::protobuf::EnumDescriptor* MsgType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgType_descriptor_;
}
bool MsgType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int DataMsg::kPartitionIdFieldNumber;
const int DataMsg::kCachedFieldNumber;
const int DataMsg::kSampledFieldNumber;
const int DataMsg::kElementLengthFieldNumber;
const int DataMsg::kElementSizeFieldNumber;
const int DataMsg::kNumElementsFieldNumber;
const int DataMsg::kScalarValueFieldNumber;
const int DataMsg::kFilePathFieldNumber;
const int DataMsg::kFileSizeFieldNumber;
const int DataMsg::kFileOffsetFieldNumber;
const int DataMsg::kMaskPathFieldNumber;
#endif  // !_MSC_VER

DataMsg::DataMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DataMsg::InitAsDefaultInstance() {
}

DataMsg::DataMsg(const DataMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DataMsg::SharedCtor() {
  _cached_size_ = 0;
  partition_id_ = GOOGLE_LONGLONG(0);
  cached_ = false;
  sampled_ = false;
  element_length_ = 0;
  element_size_ = 0;
  num_elements_ = 0;
  scalar_value_ = GOOGLE_LONGLONG(0);
  file_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  file_size_ = GOOGLE_LONGLONG(0);
  file_offset_ = GOOGLE_LONGLONG(0);
  mask_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bankID_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataMsg::~DataMsg() {
  SharedDtor();
}

void DataMsg::SharedDtor() {
  if (file_path_ != &::google::protobuf::internal::kEmptyString) {
    delete file_path_;
  }
  if (mask_path_ != &::google::protobuf::internal::kEmptyString) {
    delete mask_path_;
  }
  if (this != default_instance_) {
  }
}

void DataMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataMsg_descriptor_;
}

const DataMsg& DataMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_2eproto();
  return *default_instance_;
}

DataMsg* DataMsg::default_instance_ = NULL;

DataMsg* DataMsg::New() const {
  return new DataMsg;
}

void DataMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    partition_id_ = GOOGLE_LONGLONG(0);
    cached_ = false;
    sampled_ = false;
    element_length_ = 0;
    element_size_ = 0;
    num_elements_ = 0;
    scalar_value_ = GOOGLE_LONGLONG(0);
    if (has_file_path()) {
      if (file_path_ != &::google::protobuf::internal::kEmptyString) {
        file_path_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    file_size_ = GOOGLE_LONGLONG(0);
    file_offset_ = GOOGLE_LONGLONG(0);
    if (has_mask_path()) {
      if (mask_path_ != &::google::protobuf::internal::kEmptyString) {
        mask_path_->clear();
      }
    }
  }
  bankID_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DataMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 partition_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &partition_id_)));
          set_has_partition_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cached;
        break;
      }

      // optional bool cached = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cached:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cached_)));
          set_has_cached();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sampled;
        break;
      }

      // optional bool sampled = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sampled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sampled_)));
          set_has_sampled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_element_length;
        break;
      }

      // optional int32 element_length = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_element_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &element_length_)));
          set_has_element_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_element_size;
        break;
      }

      // optional int32 element_size = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_element_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &element_size_)));
          set_has_element_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_num_elements;
        break;
      }

      // optional int32 num_elements = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_elements:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_elements_)));
          set_has_num_elements();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_scalar_value;
        break;
      }

      // optional int64 scalar_value = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scalar_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &scalar_value_)));
          set_has_scalar_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_file_path;
        break;
      }

      // optional string file_path = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->file_path().data(), this->file_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_file_size;
        break;
      }

      // optional int64 file_size = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_file_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &file_size_)));
          set_has_file_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_file_offset;
        break;
      }

      // optional int64 file_offset = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_file_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &file_offset_)));
          set_has_file_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_mask_path;
        break;
      }

      // optional string mask_path = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mask_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mask_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mask_path().data(), this->mask_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(100)) goto parse_bankID;
        break;
      }

      // optional int32 bankID = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bankID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bankID_)));
          set_has_bankID();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DataMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 partition_id = 1;
  if (has_partition_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->partition_id(), output);
  }

  // optional bool cached = 2;
  if (has_cached()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->cached(), output);
  }

  // optional bool sampled = 3;
  if (has_sampled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->sampled(), output);
  }

  // optional int32 element_length = 4;
  if (has_element_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->element_length(), output);
  }

  // optional int32 element_size = 5;
  if (has_element_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->element_size(), output);
  }

  // optional int32 num_elements = 6;
  if (has_num_elements()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->num_elements(), output);
  }

  // optional int64 scalar_value = 7;
  if (has_scalar_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->scalar_value(), output);
  }

  // optional string file_path = 8;
  if (has_file_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_path().data(), this->file_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->file_path(), output);
  }

  // optional int64 file_size = 9;
  if (has_file_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->file_size(), output);
  }

  // optional int64 file_offset = 10;
  if (has_file_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->file_offset(), output);
  }

  // optional string mask_path = 11;
  if (has_mask_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mask_path().data(), this->mask_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->mask_path(), output);
  }

  // optional int32 bankID = 12;
  if (has_bankID()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->bankID(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DataMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 partition_id = 1;
  if (has_partition_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->partition_id(), target);
  }

  // optional bool cached = 2;
  if (has_cached()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->cached(), target);
  }

  // optional bool sampled = 3;
  if (has_sampled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->sampled(), target);
  }

  // optional int32 element_length = 4;
  if (has_element_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->element_length(), target);
  }

  // optional int32 element_size = 5;
  if (has_element_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->element_size(), target);
  }

  // optional int32 num_elements = 6;
  if (has_num_elements()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->num_elements(), target);
  }

  // optional int64 scalar_value = 7;
  if (has_scalar_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->scalar_value(), target);
  }

  // optional string file_path = 8;
  if (has_file_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_path().data(), this->file_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->file_path(), target);
  }

  // optional int64 file_size = 9;
  if (has_file_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->file_size(), target);
  }

  // optional int64 file_offset = 10;
  if (has_file_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->file_offset(), target);
  }

  // optional string mask_path = 11;
  if (has_mask_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mask_path().data(), this->mask_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->mask_path(), target);
  }

  // optional int32 bankID = 12;
  if (has_bankID()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->bankID(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DataMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 partition_id = 1;
    if (has_partition_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->partition_id());
    }

    // optional bool cached = 2;
    if (has_cached()) {
      total_size += 1 + 1;
    }

    // optional bool sampled = 3;
    if (has_sampled()) {
      total_size += 1 + 1;
    }

    // optional int32 element_length = 4;
    if (has_element_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->element_length());
    }

    // optional int32 element_size = 5;
    if (has_element_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->element_size());
    }

    // optional int32 num_elements = 6;
    if (has_num_elements()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_elements());
    }

    // optional int64 scalar_value = 7;
    if (has_scalar_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->scalar_value());
    }

    // optional string file_path = 8;
    if (has_file_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_path());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 file_size = 9;
    if (has_file_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->file_size());
    }

    // optional int64 file_offset = 10;
    if (has_file_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->file_offset());
    }

    // optional string mask_path = 11;
    if (has_mask_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mask_path());
    }

    // optional int32 bankID = 12;
    if (has_bankID()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bankID());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DataMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DataMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DataMsg::MergeFrom(const DataMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_partition_id()) {
      set_partition_id(from.partition_id());
    }
    if (from.has_cached()) {
      set_cached(from.cached());
    }
    if (from.has_sampled()) {
      set_sampled(from.sampled());
    }
    if (from.has_element_length()) {
      set_element_length(from.element_length());
    }
    if (from.has_element_size()) {
      set_element_size(from.element_size());
    }
    if (from.has_num_elements()) {
      set_num_elements(from.num_elements());
    }
    if (from.has_scalar_value()) {
      set_scalar_value(from.scalar_value());
    }
    if (from.has_file_path()) {
      set_file_path(from.file_path());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_file_size()) {
      set_file_size(from.file_size());
    }
    if (from.has_file_offset()) {
      set_file_offset(from.file_offset());
    }
    if (from.has_mask_path()) {
      set_mask_path(from.mask_path());
    }
    if (from.has_bankID()) {
      set_bankID(from.bankID());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DataMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataMsg::CopyFrom(const DataMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataMsg::IsInitialized() const {

  return true;
}

void DataMsg::Swap(DataMsg* other) {
  if (other != this) {
    std::swap(partition_id_, other->partition_id_);
    std::swap(cached_, other->cached_);
    std::swap(sampled_, other->sampled_);
    std::swap(element_length_, other->element_length_);
    std::swap(element_size_, other->element_size_);
    std::swap(num_elements_, other->num_elements_);
    std::swap(scalar_value_, other->scalar_value_);
    std::swap(file_path_, other->file_path_);
    std::swap(file_size_, other->file_size_);
    std::swap(file_offset_, other->file_offset_);
    std::swap(mask_path_, other->mask_path_);
    std::swap(bankID_, other->bankID_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DataMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataMsg_descriptor_;
  metadata.reflection = DataMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TaskMsg::kTypeFieldNumber;
const int TaskMsg::kAppIdFieldNumber;
const int TaskMsg::kAccIdFieldNumber;
const int TaskMsg::kDataFieldNumber;
const int TaskMsg::kAccFieldNumber;
const int TaskMsg::kMsgFieldNumber;
#endif  // !_MSC_VER

TaskMsg::TaskMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TaskMsg::InitAsDefaultInstance() {
  acc_ = const_cast< ::blaze::AccMsg*>(&::blaze::AccMsg::default_instance());
}

TaskMsg::TaskMsg(const TaskMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TaskMsg::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  app_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  acc_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  acc_ = NULL;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TaskMsg::~TaskMsg() {
  SharedDtor();
}

void TaskMsg::SharedDtor() {
  if (app_id_ != &::google::protobuf::internal::kEmptyString) {
    delete app_id_;
  }
  if (acc_id_ != &::google::protobuf::internal::kEmptyString) {
    delete acc_id_;
  }
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (this != default_instance_) {
    delete acc_;
  }
}

void TaskMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskMsg_descriptor_;
}

const TaskMsg& TaskMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_2eproto();
  return *default_instance_;
}

TaskMsg* TaskMsg::default_instance_ = NULL;

TaskMsg* TaskMsg::New() const {
  return new TaskMsg;
}

void TaskMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_app_id()) {
      if (app_id_ != &::google::protobuf::internal::kEmptyString) {
        app_id_->clear();
      }
    }
    if (has_acc_id()) {
      if (acc_id_ != &::google::protobuf::internal::kEmptyString) {
        acc_id_->clear();
      }
    }
    if (has_acc()) {
      if (acc_ != NULL) acc_->::blaze::AccMsg::Clear();
    }
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TaskMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .blaze.MsgType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::blaze::MsgType_IsValid(value)) {
            set_type(static_cast< ::blaze::MsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_app_id;
        break;
      }

      // optional string app_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_app_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->app_id().data(), this->app_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_acc_id;
        break;
      }

      // optional string acc_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_acc_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_acc_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->acc_id().data(), this->acc_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // repeated .blaze.DataMsg data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_data;
        if (input->ExpectTag(42)) goto parse_acc;
        break;
      }

      // optional .blaze.AccMsg acc = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_acc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_acc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_msg;
        break;
      }

      // optional string msg = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TaskMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .blaze.MsgType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string app_id = 2;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->app_id().data(), this->app_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->app_id(), output);
  }

  // optional string acc_id = 3;
  if (has_acc_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->acc_id().data(), this->acc_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->acc_id(), output);
  }

  // repeated .blaze.DataMsg data = 4;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->data(i), output);
  }

  // optional .blaze.AccMsg acc = 5;
  if (has_acc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->acc(), output);
  }

  // optional string msg = 6;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TaskMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .blaze.MsgType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional string app_id = 2;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->app_id().data(), this->app_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->app_id(), target);
  }

  // optional string acc_id = 3;
  if (has_acc_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->acc_id().data(), this->acc_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->acc_id(), target);
  }

  // repeated .blaze.DataMsg data = 4;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->data(i), target);
  }

  // optional .blaze.AccMsg acc = 5;
  if (has_acc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->acc(), target);
  }

  // optional string msg = 6;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TaskMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .blaze.MsgType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string app_id = 2;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->app_id());
    }

    // optional string acc_id = 3;
    if (has_acc_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->acc_id());
    }

    // optional .blaze.AccMsg acc = 5;
    if (has_acc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->acc());
    }

    // optional string msg = 6;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

  }
  // repeated .blaze.DataMsg data = 4;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TaskMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TaskMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TaskMsg::MergeFrom(const TaskMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
    if (from.has_acc_id()) {
      set_acc_id(from.acc_id());
    }
    if (from.has_acc()) {
      mutable_acc()->::blaze::AccMsg::MergeFrom(from.acc());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TaskMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskMsg::CopyFrom(const TaskMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_acc()) {
    if (!this->acc().IsInitialized()) return false;
  }
  return true;
}

void TaskMsg::Swap(TaskMsg* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(app_id_, other->app_id_);
    std::swap(acc_id_, other->acc_id_);
    data_.Swap(&other->data_);
    std::swap(acc_, other->acc_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TaskMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TaskMsg_descriptor_;
  metadata.reflection = TaskMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AccMsg_KeyValue::kKeyFieldNumber;
const int AccMsg_KeyValue::kValueFieldNumber;
#endif  // !_MSC_VER

AccMsg_KeyValue::AccMsg_KeyValue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AccMsg_KeyValue::InitAsDefaultInstance() {
}

AccMsg_KeyValue::AccMsg_KeyValue(const AccMsg_KeyValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AccMsg_KeyValue::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccMsg_KeyValue::~AccMsg_KeyValue() {
  SharedDtor();
}

void AccMsg_KeyValue::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void AccMsg_KeyValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccMsg_KeyValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccMsg_KeyValue_descriptor_;
}

const AccMsg_KeyValue& AccMsg_KeyValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_2eproto();
  return *default_instance_;
}

AccMsg_KeyValue* AccMsg_KeyValue::default_instance_ = NULL;

AccMsg_KeyValue* AccMsg_KeyValue::New() const {
  return new AccMsg_KeyValue;
}

void AccMsg_KeyValue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AccMsg_KeyValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required bytes value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AccMsg_KeyValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->key(), output);
  }

  // required bytes value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AccMsg_KeyValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // required bytes value = 2;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AccMsg_KeyValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // required bytes value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccMsg_KeyValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccMsg_KeyValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccMsg_KeyValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AccMsg_KeyValue::MergeFrom(const AccMsg_KeyValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AccMsg_KeyValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccMsg_KeyValue::CopyFrom(const AccMsg_KeyValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccMsg_KeyValue::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AccMsg_KeyValue::Swap(AccMsg_KeyValue* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AccMsg_KeyValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccMsg_KeyValue_descriptor_;
  metadata.reflection = AccMsg_KeyValue_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int AccMsg::kAccIdFieldNumber;
const int AccMsg::kPlatformIdFieldNumber;
const int AccMsg::kTaskImplFieldNumber;
const int AccMsg::kParamFieldNumber;
#endif  // !_MSC_VER

AccMsg::AccMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AccMsg::InitAsDefaultInstance() {
}

AccMsg::AccMsg(const AccMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AccMsg::SharedCtor() {
  _cached_size_ = 0;
  acc_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  platform_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  task_impl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccMsg::~AccMsg() {
  SharedDtor();
}

void AccMsg::SharedDtor() {
  if (acc_id_ != &::google::protobuf::internal::kEmptyString) {
    delete acc_id_;
  }
  if (platform_id_ != &::google::protobuf::internal::kEmptyString) {
    delete platform_id_;
  }
  if (task_impl_ != &::google::protobuf::internal::kEmptyString) {
    delete task_impl_;
  }
  if (this != default_instance_) {
  }
}

void AccMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccMsg_descriptor_;
}

const AccMsg& AccMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_2eproto();
  return *default_instance_;
}

AccMsg* AccMsg::default_instance_ = NULL;

AccMsg* AccMsg::New() const {
  return new AccMsg;
}

void AccMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_acc_id()) {
      if (acc_id_ != &::google::protobuf::internal::kEmptyString) {
        acc_id_->clear();
      }
    }
    if (has_platform_id()) {
      if (platform_id_ != &::google::protobuf::internal::kEmptyString) {
        platform_id_->clear();
      }
    }
    if (has_task_impl()) {
      if (task_impl_ != &::google::protobuf::internal::kEmptyString) {
        task_impl_->clear();
      }
    }
  }
  param_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AccMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string acc_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_acc_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->acc_id().data(), this->acc_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_platform_id;
        break;
      }

      // required string platform_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_platform_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platform_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->platform_id().data(), this->platform_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_task_impl;
        break;
      }

      // optional bytes task_impl = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_task_impl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_task_impl()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_param;
        break;
      }

      // repeated .blaze.AccMsg.KeyValue param = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_param;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AccMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string acc_id = 1;
  if (has_acc_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->acc_id().data(), this->acc_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->acc_id(), output);
  }

  // required string platform_id = 2;
  if (has_platform_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platform_id().data(), this->platform_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->platform_id(), output);
  }

  // optional bytes task_impl = 3;
  if (has_task_impl()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->task_impl(), output);
  }

  // repeated .blaze.AccMsg.KeyValue param = 4;
  for (int i = 0; i < this->param_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->param(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AccMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string acc_id = 1;
  if (has_acc_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->acc_id().data(), this->acc_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->acc_id(), target);
  }

  // required string platform_id = 2;
  if (has_platform_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platform_id().data(), this->platform_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->platform_id(), target);
  }

  // optional bytes task_impl = 3;
  if (has_task_impl()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->task_impl(), target);
  }

  // repeated .blaze.AccMsg.KeyValue param = 4;
  for (int i = 0; i < this->param_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->param(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AccMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string acc_id = 1;
    if (has_acc_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->acc_id());
    }

    // required string platform_id = 2;
    if (has_platform_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->platform_id());
    }

    // optional bytes task_impl = 3;
    if (has_task_impl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->task_impl());
    }

  }
  // repeated .blaze.AccMsg.KeyValue param = 4;
  total_size += 1 * this->param_size();
  for (int i = 0; i < this->param_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->param(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AccMsg::MergeFrom(const AccMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  param_.MergeFrom(from.param_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_acc_id()) {
      set_acc_id(from.acc_id());
    }
    if (from.has_platform_id()) {
      set_platform_id(from.platform_id());
    }
    if (from.has_task_impl()) {
      set_task_impl(from.task_impl());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AccMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccMsg::CopyFrom(const AccMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < param_size(); i++) {
    if (!this->param(i).IsInitialized()) return false;
  }
  return true;
}

void AccMsg::Swap(AccMsg* other) {
  if (other != this) {
    std::swap(acc_id_, other->acc_id_);
    std::swap(platform_id_, other->platform_id_);
    std::swap(task_impl_, other->task_impl_);
    param_.Swap(&other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AccMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccMsg_descriptor_;
  metadata.reflection = AccMsg_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace blaze

// @@protoc_insertion_point(global_scope)
